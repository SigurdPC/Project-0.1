import { useState, useEffect, useMemo } from 'react';
import {
  Container,
  Typography,
  Alert,
  CircularProgress,
  Box,
  Snackbar,
  Paper,
  Tabs,
  Tab
} from '@mui/material';
import {
  Today as TodayIcon,
  Timeline as TimelineIcon
} from '@mui/icons-material';
import DataTable, { Column } from '../components/DataTable';
import type { DailyROB as DailyROBType } from '../types';
import dailyROBsApi from '../api/dailyROBsApi';
import { formatDate } from '../utils/dateUtils';
import { useValidation } from '../hooks/useValidation';

// Улучшенные колонки с валидацией и дополнительной информацией
const columns: Column[] = [
  { id: 'date', label: 'Date', type: 'date', searchable: true },
  { id: 'ulsd', label: 'ULSD', type: 'number', searchable: true, min: 0 },
  { id: 'changeXL', label: 'Change XL', type: 'number', searchable: true, min: 0 },
  { id: 'lubOil', label: 'Lub oil', type: 'number', searchable: true, min: 0 },
  { id: 'totalConsumption', label: 'Total Consumption', type: 'number', searchable: true, min: 0 },
];

const DailyROB = () => {
  const [data, setData] = useState<DailyROBType[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [tabValue, setTabValue] = useState<number>(0);
  const [snackbar, setSnackbar] = useState<{
    open: boolean;
    message: string;
    severity: 'success' | 'error' | 'info' | 'warning';
  }>({
    open: false,
    message: '',
    severity: 'info'
  });

  // Используем хук валидации для проверки дубликатов
  // Для DailyROB уникальным полем является date (уникальное значение на день)
  const { checkDuplicate } = useValidation<DailyROBType>(
    data,
    ['date']
  );

  // Получаем текущую дату в правильном формате, согласованном с серверным форматом
  const today = useMemo(() => {
    const now = new Date();
    return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')}`;
  }, []);

  // Записи только для сегодняшнего дня
  const todayRecords = useMemo(() => {
    return data.filter(record => record.date === today);
  }, [data, today]);

  // Fetch data from API when component mounts
  useEffect(() => {
    fetchData();
  }, []);

  // Function to fetch all records from API
  const fetchData = async () => {
    setLoading(true);
    try {
      const records = await dailyROBsApi.getAll();
      setData(records);
      setError(null);
    } catch (err) {
      console.error('Failed to fetch data:', err);
      setError('Failed to load data. Please try again later.');
      showSnackbar('Failed to load data', 'error');
    } finally {
      setLoading(false);
    }
  };

  // Function to show snackbar notification
  const showSnackbar = (message: string, severity: 'success' | 'error' | 'info' | 'warning') => {
    setSnackbar({
      open: true,
      message,
      severity
    });
  };

  // Handle snackbar close
  const handleSnackbarClose = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  // Switch between tabs
  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  // Валидация числовых полей и проверка на отрицательные значения
  const validateNumericFields = (data: Record<string, any>): { valid: boolean, message?: string } => {
    const numericFields = ['ulsd', 'changeXL', 'lubOil', 'totalConsumption'];
    
    for (const field of numericFields) {
      const value = parseFloat(data[field] as any);
      
      if (isNaN(value)) {
        return { valid: false, message: `Field ${field} must be a valid number` };
      }
      
      if (value < 0) {
        return { valid: false, message: `Field ${field} cannot be negative` };
      }
    }
    
    return { valid: true };
  };

  // Валидация даты (не может быть в будущем)
  const validateDate = (date: string): { valid: boolean, message?: string } => {
    const selectedDate = new Date(date);
    const currentDate = new Date();
    
    // Сброс времени для корректного сравнения только дат
    selectedDate.setHours(0, 0, 0, 0);
    currentDate.setHours(0, 0, 0, 0);
    
    if (selectedDate > currentDate) {
      return { valid: false, message: 'Cannot add records for future dates' };
    }
    
    return { valid: true };
  };

  const handleAdd = async (newData: DailyROBType) => {
    setLoading(true);
    try {
      // Omit the id property as it will be generated by the server
      const { id, ...dataToSend } = newData;
      
      // Валидация даты
      const dateValidation = validateDate(dataToSend.date);
      if (!dateValidation.valid) {
        showSnackbar(dateValidation.message || 'Invalid date', 'error');
        return false;
      }
      
      // Валидация числовых полей
      const numericValidation = validateNumericFields(dataToSend);
      if (!numericValidation.valid) {
        showSnackbar(numericValidation.message || 'Invalid numeric values', 'error');
        return false;
      }

      // Preprocess numeric fields
      const processedData = {
        ...dataToSend,
        ulsd: parseFloat(dataToSend.ulsd as any) || 0,
        changeXL: parseFloat(dataToSend.changeXL as any) || 0,
        lubOil: parseFloat(dataToSend.lubOil as any) || 0,
        totalConsumption: parseFloat(dataToSend.totalConsumption as any) || 0,
      };

      // Проверка на дубликаты перед отправкой на сервер
      if (checkDuplicate(processedData)) {
        showSnackbar('Cannot add duplicate record. A record for this date already exists.', 'error');
        return false;
      }

      const savedRecord = await dailyROBsApi.create(processedData);
      
      // Обновляем состояние только после успешного ответа сервера
      setData((prevData: DailyROBType[]) => [...prevData, savedRecord]);
      
      showSnackbar('Record added successfully', 'success');
      return true;
    } catch (err: any) {
      console.error('Failed to add record:', err);

      // Проверка на ошибку дубликата с сервера
      if (err.message && err.message.includes('Duplicate')) {
        showSnackbar(err.message, 'error');
      } else {
        showSnackbar('Failed to add record', 'error');
      }
      return false;
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = async (id: string, updatedData: DailyROBType) => {
    setLoading(true);
    try {
      // Omit the id property from the data to send
      const { id: _, ...dataToSend } = updatedData;
      
      // Валидация даты
      const dateValidation = validateDate(dataToSend.date);
      if (!dateValidation.valid) {
        showSnackbar(dateValidation.message || 'Invalid date', 'error');
        return false;
      }
      
      // Валидация числовых полей
      const numericValidation = validateNumericFields(dataToSend);
      if (!numericValidation.valid) {
        showSnackbar(numericValidation.message || 'Invalid numeric values', 'error');
        return false;
      }

      // Preprocess numeric fields
      const processedData = {
        ...dataToSend,
        ulsd: parseFloat(dataToSend.ulsd as any) || 0,
        changeXL: parseFloat(dataToSend.changeXL as any) || 0,
        lubOil: parseFloat(dataToSend.lubOil as any) || 0,
        totalConsumption: parseFloat(dataToSend.totalConsumption as any) || 0,
      };

      // Проверка на дубликаты перед отправкой на сервер (исключая текущую запись)
      if (checkDuplicate(processedData, id)) {
        showSnackbar('Cannot update to duplicate record. A record for this date already exists.', 'error');
        return false;
      }

      const updatedRecord = await dailyROBsApi.update(id, processedData);
      
      // Обновляем состояние только после успешного ответа сервера
      setData((prevData: DailyROBType[]) => prevData.map((item: DailyROBType) => 
        (item.id === id ? updatedRecord : item)
      ));
      
      showSnackbar('Record updated successfully', 'success');
      return true;
    } catch (err: any) {
      console.error('Failed to update record:', err);

      // Проверка на ошибку дубликата с сервера
      if (err.message && err.message.includes('Duplicate')) {
        showSnackbar(err.message, 'error');
      } else {
        showSnackbar('Failed to update record', 'error');
      }
      return false;
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (!window.confirm('Are you sure you want to delete this record?')) {
      return;
    }

    setLoading(true);
    try {
      await dailyROBsApi.delete(id);
      
      // Обновляем состояние только после успешного ответа сервера
      setData((prevData: DailyROBType[]) => prevData.filter((item: DailyROBType) => 
        item.id !== id
      ));
      
      showSnackbar('Record deleted successfully', 'success');
    } catch (err) {
      console.error('Failed to delete record:', err);
      showSnackbar('Failed to delete record', 'error');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container sx={{ mt: 4, mb: 6 }}>
      <Typography variant="h5" gutterBottom align="center" sx={{ mb: 3, fontWeight: 500 }}>
        Daily ROB
      </Typography>

      {/* Loading indicator */}
      {loading && (
        <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>
          <CircularProgress />
        </Box>
      )}

      {/* Error message */}
      {error && (
        <Alert severity="error" sx={{ mb: 3, borderRadius: '8px' }}>
          {error}
        </Alert>
      )}

      {/* Tabs for switching between modes */}
      <Paper sx={{ mb: 2, borderRadius: '12px', overflow: 'hidden' }}>
        <Tabs
          value={tabValue}
          onChange={handleTabChange}
          indicatorColor="primary"
          textColor="primary"
          centered
          sx={{
            '& .MuiTab-root': {
              py: 2,
              fontSize: '0.95rem',
              minHeight: '56px'
            }
          }}
        >
          <Tab icon={<TodayIcon />} label="Today" />
          <Tab icon={<TimelineIcon />} label="History" />
        </Tabs>
      </Paper>

      {/* Content for "Today" tab */}
      {tabValue === 0 && (
        <Paper sx={{ p: 4, mb: 3, borderRadius: '12px', boxShadow: '0 4px 12px rgba(0,0,0,0.05)' }}>
          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', mb: 4, position: 'relative' }}>
            <Typography variant="h6" sx={{ position: 'absolute', left: 0, right: 0, textAlign: 'center', fontWeight: 500 }}>
              {formatDate(today)}
            </Typography>
          </Box>

          <DataTable
            columns={columns}
            data={todayRecords}
            onAdd={handleAdd}
            onEdit={handleEdit}
            onDelete={handleDelete}
          />

          {todayRecords.length === 0 && !loading && (
            <Typography align="center" color="text.secondary" sx={{ py: 6, fontSize: '1.1rem' }}>
              No records for today
            </Typography>
          )}
        </Paper>
      )}

      {/* Content for "History" tab */}
      {tabValue === 1 && (
        <Paper sx={{ p: 4, mb: 3, borderRadius: '12px', boxShadow: '0 4px 12px rgba(0,0,0,0.05)' }}>
          <DataTable
            columns={columns}
            data={data}
            onAdd={handleAdd}
            onEdit={handleEdit}
            onDelete={handleDelete}
          />

          {data.length === 0 && !loading && (
            <Typography align="center" color="text.secondary" sx={{ py: 6, fontSize: '1.1rem' }}>
              No records found
            </Typography>
          )}
        </Paper>
      )}

      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleSnackbarClose}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert onClose={handleSnackbarClose} severity={snackbar.severity} sx={{ borderRadius: '8px', boxShadow: '0 4px 12px rgba(0,0,0,0.15)' }}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default DailyROB; 